#6.2 Оператор while****************************************************************************************************


# password=int(input('Введите пароль: '))
# while password !=7708:
#     print('Неверный пароль! ')
#     password = int(input('Попробуйте еще раз: '))
# print("Пароль верный.Добро пожаловать!!!")

# balance = int(input('Сколько денег пришло? '))
# while balance > 5000:
#     product_cost = int(input('Введите стоимость товара: '))
#     balance -= product_cost
# print('Внимание на карте осталось мало денег! Остановитесь!')
# print('Баланс счёта: ', balance)
## Даша начала проходить циклы. Она написала программу, которая просто
# должна считать сумму чисел до тех пор, пока мы не ввели 0, но что-то пошло не так.
# number = int(input(‘Введите число: ’))
# While number <= 0:
#  summ += number
#  number = int(input(‘Введите число: ’))
# print(Summ)
# a=int(input('Введите число: '))
# while a != 0:
#     a = int(input('Введите число: '))
#     a += a
#     print ( a )

# Пример:
# Введите пароль: 100000
# Неверный пароль!
# Попробуйте ещё раз: 500
# Неверный пароль!
# Попробуйте ещё раз: 235
# Пароль верный! Добро пожаловать.

# a=int(input('Введите пароль: '))
# while a !=235:
#     print('Неверный пароль!')
#     a=int(input('Попробуйте ещё раз: '))
# print('Пароль верный! Добро пожаловать.')

# Кирилл копит себе на хорошую новенькую машину и для этого он каждый раз
# откладывает в копилку определённую сумму с зарплаты.
# Напишите программу, которая спрашивает у пользователя
# «Сколько отложить денег?» до тех пор, пока сумма в копилке
# не превысит или не станет равна 500 000 рублей.
# a = int(input('Сколько отложить денег? '))
# while a <= 499000:
#     b = int(input('Надо еще '))
#
#     a+=b
#     print(a)
# print('Хватит')

# Костя играет в азартную игру с кубиками с владельцем заведения. Правда,
# с довольно интересными правилами: если у Кости на кубике выпадет
# столько же или больше, чем у владельца, то Костя задолжает разность
# в тысячах долларов. Однако если выпадет меньше, то Косте выплатят
# столько тысяч долларов, сколько будет сумма очков на кубиках.
# # Напишите программу. На вход в программу подаётся два числа.
# Если первое число больше либо равно второму, нужно вывести на
# экран их разность и отдельной строкой фразу: «Костя платит».
# В противном случае вывести их сумму и отдельной строкой — фразу:
# «Владелец платит». Также последней строкой в результате нужно вывести на экран фразу: «Игра окончена».
# # # # Пример:
# # Кубик Кости: 3
# # Кубик владельца: 4
# # Сумма: 7
# # Владелец платит
# # Игра окончена
# boy = int(input("Кубик Кости: "))
# owner = int(input('Кубик Владельца: '))
# if boy >= owner :
#     boy -= owner
#     print('У Кости больше на ', boy, 'кубиков чем у Владельца' )
#     print("Костя платит ", boy * 1000, '$', sep='' )
# else:
#     boy += owner
#     print('Сумма: ', boy)
#     print('Владелец платит: ', boy * 1000, '$', sep='')
# print('Игра окончена!')

# weather = int(input('Сколько градусов на улице? '))
# meters = 0
# while weather > 15:
#     meters += 20
#     weather -= 2
#     meters += 10
# print('Пройдено метров: ', meters)


# number=int(input('Введите число: '))
# while number!=0:
#     number=int(input('Введите чило'))
#     number += number
#     print(number)
# print('Вы ввели 0')


#
# password=int(input('Введите пароль: '))
# while password<= 235\
#         :
#     print('Неверный пароль!!!')
#     password=int(input('Попробуйте еще раз: '))
# print('Пароль верный. Добро пожаловать!')

# car = int(input('Сколько отложить денег? '))

# while car < 500000 and car != 500000   :
#     car1 = int(input('Сколько отложить денег? '))
#     car+=car1
#
# print('достаточно!!!')
# print('Баланс: ', car)

# Представим, что у нас далёкое будущее и мы можем заниматься спортом на планетах
# со странными перепадами температур. Спортсмен бегает по стадиону до тех пор,
# пока температура на улице больше 15 градусов. Он пробегает 20 метров, затем
# температура падает на два градуса, и, если уже в этот момент она стала меньше
# либо равна 15 градусам, спорт сразу заканчивается. Если же всё в порядке, то
# он проходит пешком ещё 10 метров. Затем всё это повторяется.
# # Напишите программу, которая спрашивает у пользователя, сколько на улице градусов,
# и, исходя из погоды, считает количество пройденных по стадиону метров и выводит ответ на экран.

# degree = int(input('Сколько на улице градусов? '))
# metres = 0
# while degree > 15:
#     metres += 20
#     degree -= 2
#     if degree <= 15:
#         break
#     metres += 10
# print('Спортсмен пробежал: ', metres )

# Нам нужно расшифровать определённый код в виде одного большого числа.
# Для этого нужно посчитать сумму цифр справа налево. Если мы встречаем
# в числе цифру 5, то выводим сообщение «Обнаружен разрыв» и заканчиваем
# считать сумму. В конце программы на экран выводится сумма тех цифр, которые мы взяли.

# number = int(input('Введите число: '))
# summ = 0
# while number != 0:
#     last_num = number % 10
#     print(last_num)
#     if last_num == 5:
#         print('Обнаружен разрыв!')
#         break
#     summ += last_num
#     number //= 10
# print('Сумма: ', summ)

# Костя опять за старое! Только теперь он играет в кубики более надёжно,
# то есть на какую-то фиксированную сумму. И при этом пока что постоянно выигрывает!
# Однако по правилам это не мешает ему проиграть сразу всё.
# # Напишите программу, которая запрашивает у пользователя начальное количество денег
# и, пока оно меньше 10 000, запрашивает число, которое выпало на кубике (от 1 до 6).
# Если на кубике выпало 3, то выводится сообщение «Вы проиграли всё!», и деньги обнуляются.
# Если выпало другое число, к сумме прибавляется 500.

# # # # Пример:
# # Введите стартовую сумму: 5000
# # Сколько выпало на кубике? 4
# # Выиграли 500 рублей!
# # Сколько выпало на кубике? 5
# # Выиграли 500 рублей!
# # Сколько выпало на кубике? 3
# # Вы проиграли всё!
# # Игра закончена.
# # Итого осталось: 0 рублей
# # #
# Пример 2:
# # Введите стартовую сумму: 9700
# # Сколько выпало на кубике? 4
# # Выиграли 500 рублей!
# # Игра закончена.
# # Итого осталось: 10200 рублей

# start=int(input('Введите стартовую сумму: '))
# while start < 10000 :
#     cube = int(input('Сколько выпало на кубике? '))
#     start += 500
#     if cube == 3:
#         print('Вы проиграли всё!')
#         print('Игра закончена.')
#         start = 0
#         break
#     print('Выиграли 500 рублей!')
#     print('Игра закончена.')
# print('Итого осталось: ', start, 'рублей')


# 6.4 Бесконечный цикл. Логический тип данных
# Задача 1. Неправильный таймер
# # Петя писал таймер для телефона, но у него что-то пошло не так.
#
# count = 10
# while 0 < count <= 10 :
#     count -= 1
#     print(count)
# else:
#     print('Время вышло!')

# # Скопируйте программу в редактор, исправьте ошибки и убедитесь, что на экран
# выводятся числа с 10 до 0 и сообщение «Время вышло!».
#
# # # Задача 2. Тестируем приложение
# # Напишите программу, которая имитирует работу с приложением: программа спрашивает
# у пользователя «Продолжаем работать? 1/0: » до тех пор, пока пользователь
# не введёт 0, — после этого выводится сообщение: «Приложение закрывается…»
# . В конце программы также выводится сообщение: «Работа завершена».
# Для создания бесконечного цикла используйте while True.
#
# work = True == 1
# while work > 0 :
#     work = int(input('Продолжаем работать? 1/0: '))
# print('Приложение закрывается…')
# print('Работа завершена')
# #
# Задача 3. Вирус
# # Дима написал программу-вирус специально для того, чтобы проучить своего
# друга-должника, который никак не хочет возвращать скейтборд. Программа
# не даёт работать за компьютером и постоянно выводит на экран сообщение
# «Компьютер заблокирован. Вернёшь скейт — скажу код разблокировки!».
# Как только вводится правильный код, вирус удаляется. Напишите такую же программу, которую написал Дима.
# # # # Пример:
# # Компьютер заблокирован. Вернёшь скейт — скажу код разблокировки!
# # Введите код: 1005
# Компьютер заблокирован. Вернёшь скейт — скажу код разблокировки!
# # Введите код: 7777
# # Компьютер заблокирован. Вернёшь скейт — скажу код разблокировки!
# # Введите код: 0550
# # Код верный, завершаю работу...

# skate = True == 1555
# while skate !=1555:
#     print('Компьютер заблокирован. Вернёшь скейт — скажу код разблокировки!')
#     skate = int(input('Введите код: '))
# print('Код верный, завершаю работу...')


# 6.5 Цикл while со счётчиком
# Задача 1. Надоедливый заказчик
# # Нашему заказчику нужно, чтобы фраза «Я — программист!» выводилась
# на экран столько раз, сколько он сам этого захочет.
# # Напишите программу, которая запрашивает число — количество строчек
# с фразой «Я — программист!» — и столько же раз выводит на экран эту фразу.
# Для решения задачи используйте переменную-счётчик, которая увеличивается на
# единицу до тех пор, пока не будет введено нужное количество слов.

# text = int(input("Сколько раз нужно вывести строку? "))
# counter = 0
# while counter < text:
#     counter += 1
#     print('Я — программист!')

# # Задача 2. Напоминалка
# # У Евгения много работы, а ещё он очень забывчивый. Иногда он забывает
# о какой-нибудь важной встрече, и ему приходится выслушивать критику от
# начальства. Напишите для него программу-напоминалку. В самом начале программа
# спрашивает, сколько раз ему напомнить, а затем нужное количество раз выводит: «Вы хотели не забыть о чём-то».

# remind = int(input('Сколько раз вам напомнить? '))
# remember = 0
# while remember < remind:
#     remember += 1
#     print('Вы хотели не забыть о чём-то')

# # # Задача 3. Рыбалка
#
# Наши прекрасные родственники удачно сходили на рыбалку. Настолько, что ходили мешком
# перетаскивать рыбу с берега в машину целых n раз. Каждый мешок они взвешивали
# на электронных весах (все мешки весили по-разному). Напишите программу для весов,
# которая считает суммарный вес мешков и выводит его на экран.

# bag = int(input('Сколько мешков надо перетащить? '))
# dragged = 0
# total_weight = 0
# while dragged < bag:
#     dragged += 1
#     weight=int(input('Сколько весит мешок? '))
#     print('Перенесно ', dragged, 'из ', bag)
#     total_weight += weight
# print('Суммарный вес мешков: ', total_weight)

# 6.7 Домашняя работа
# Задача
# Цель домашнего задания
# Научиться работать с while, break, логическим типом True / False, счётчиками, а также с бесконечным циклом.
# # # Что входит в задание
# Написать программы:
# # Кубы чисел.
# Коллекторы.
# Слишком большие числа.
# Календари.
# Счастливый билетик.
# Поставьте оценку!
# Обычный день на работе.
# Вклады.
# Игра «Угадай число».
# Игра «Компьютер угадывает число».
# Домашнее задание принимается только через Fork или корректно оформленный repl.it.
# Для выполнения домашнего задания используйте подготовленный нами шаблон.
print('Задача 1. Кубы чисел')
# # # Что нужно сделать
# # У любителя математики Паши есть распечатанные таблички со степенями двойки.
# Теперь он хочет взять степень тройки от единицы до абсолютно любого числа!
# # Напишите программу, которая возводит в третью степень каждое число от 1 до N и выводит результат на экран.
# # # # Что оценивается
# # результат вывода корректен, решение использует цикл while;
# input содержит корректное приглашение для ввода;
# переменные имеют значащие имена, не только a, b, c, d (видео 2.3);
# правильное употребление пробелов после запятых и при бинарных операциях.
print('*****************************************************')
num = int(input('Введите число: '))
cube = 0
x = 0
while cube < num:
    cube +=1
    x =3
    y = cube + x
    y=3
    print(y)
print('*****************************************************')

print('Задача 2. Коллекторы')
# # # Что нужно сделать
# # Напишите робота для коллекторов. В самом начале он спрашивает имя должника и сумму долга,
# а затем начинает требовать у него погашения до тех пор, пока он не введёт нужную сумму
# (равную сумме долга или больше). После погашения долга робот сообщает об этом пользователю и благодарит его.
# Пример:
# Василий, ваша задолженность составляет 100 рублей.
# Сколько рублей вы внесёте прямо сейчас, чтобы её погасить? 50
# Маловато, Василий. Давайте ещё раз.
# Сколько рублей вы внесёте прямо сейчас, чтобы её погасить? 90
# Маловато, Василий. Давайте ещё раз.
# Сколько рублей вы внесёте прямо сейчас, чтобы её погасить? 110
# Отлично, Василий! Вы погасили долг. Спасибо!
# Рекомендация
# Обратите внимание — считать сумму внесённых средств не нужно, это не соответствует условию задачи.
# Что оценивается
# input содержит корректное приглашение для ввода;
# результат вывода корректен;
# переменные имеют значащие имена, не только a, b, c, d (видео 2.3);
# правильное употребление пробелов после запятых и при бинарных операциях.

name = input('Введите имя: ')
duty = int(input('Введите сумму долга: '))
print(name,',', ' ваша задолженность составляет ', duty, ' рублей.', sep='')
contribution = int(input('Сколько рублей вы внесёте прямо сейчас, чтобы её погасить? '))
while contribution < duty:
    print('Маловато, ', name, '.' ' Давайте ещё раз.', sep='')
    contribution = int(input('Сколько рублей вы внесёте прямо сейчас, чтобы её погасить? '))
print('Отлично, ', name, '!',  ' Вы погасили долг. Спасибо!', sep='')
print('*****************************************************')


print('Задача 3. Слишком большие числа')
# Что нужно сделать
# У неудачливого бухгалтера всё опять идёт наперекосяк: ему приносят такие большие счета,
# что числа не помещаются на бумаге.
# Напишите программу, которая считала бы для него, сколько десятичных цифр (знаков) во вводимом числе.
# Что оценивается
# input содержит корректное приглашение для ввода;
# результат вывода корректен, правильно подсчитано количество цифр в числе;
# переменные имеют значащие имена, не только a, b, c, d (видео 2.3);
# правильное употребление пробелов после запятых и при бинарных операциях;
# используется цикл while;
# решение не использует работу со строками и операции над ними.

number = int(input('Введите число: '))
decimal = 0
while number > 0:
  decimal += 1
  number = number // 10
print(decimal)
print('*****************************************************')


print('Задача 4. Календари')
# Что нужно сделать
# Ваня увлекается историей, в особенности календарями. Он изучает календари разных времён,
# эпох и народностей. Для исследования ему нужно посчитать, у кого сколько было месяцев с чётным количеством дней.
# Напишите программу, которая считает количество только чётных чисел в последовательности
# (последовательность заканчивается при вводе нуля) и выводит ответ на экран.
# Что оценивается
# input содержит корректное приглашение для ввода;
# результат вычислений корректен, ввод осуществляется внутри цикла;
# при вводе 0 происходит выход из цикла;
# переменные имеют значащие имена, не только a, b, c, d (видео 2.3);
# правильное употребление пробелов после запятых и при бинарных операциях.

repeat = 0
date = True
while date != 0:
    date = int(input('Введите дату: '))
    if date % 2 == 0 :
        repeat += 1
print('Количество только чётных дней: ', repeat -1 )

print('*****************************************************')

print('Задача 5. Счастливый билетик')
# Что нужно сделать
# В старину, когда даже в столице билеты в общественном транспорте выдавали контролёры,
# существовало поверье: если на билете сумма первых трёх цифр в номере билета равна
# сумме последних трёх, то это к удаче.
# Напишите программу, которая получала бы на входе шестизначный номер билета и выводила,
# счастливый это билет или нет. К примеру, билеты 666 666 и 252 135 — счастливые, а 123 456 — нет.
# Что оценивается
# input содержит корректное приглашение для ввода;
# результат вычислений корректен;
# решать можно как в цикле, так и без него;
# в решении не используются работа со строками и операции над ними;
# переменные имеют значащие имена, не только a, b, c, d (видео 2.3);
# правильное употребление пробелов после запятых и при бинарных операциях.

ticket = int(input('Введите номер билета: '))
num1 = ticket // 10000 // 10
num2 = ticket // 10000 % 10
num3 = ticket // 100 % 100 // 10
num4 = ticket % 1000 // 100
num5 = ticket % 100 // 10
num6 = ticket % 10
first = num1 + num2 + num3
second = num4 + num5 + num6
if first == second:
    print('Билет счастливый!!!')
else:
    print("Нет")

print('*****************************************************')

print('Задача 6. Поставьте оценку!')
#  Что нужно сделать
# Вася выложил своё новое приложение на платформу для начинающих разработчиков,
# на ней пользователи могут ставить оценку приложению от −100 до 100. Ему захотелось
# сравнить количество положительных и отрицательных отзывов, для этого он заранее отфильтровал
# все отзывы так, чтобы в конце были те, которые равны нулю.
# Напишите программу, которая находит количество положительных и количество отрицательных
# чисел в последовательности. Последовательность заканчивается на числе 0.
# Пример:
# Введите число: −4
# Введите число: −90
# Введите число: 6
# Введите число: 0
# Кол-во положительных чисел: 1
# Кол-во отрицательных чисел: 2
# Что оценивается
# результат вычислений корректен;
# формат вывода соответствует примеру;
# input содержит корректное приглашение для ввода;
# ввод чисел осуществляется внутри цикла;
# при вводе 0 происходит выход из цикла и производится вывод подсчитанных положительных и отрицательных чисел;
# переменные имеют значащие имена, не только a, b, c, d (видео 2.3);
# правильное употребление пробелов после запятых и при бинарных операциях.

a = True
positive = 0
negative = 0
while a != 0 :
    a = int(input('Введите число: '))
    if -100 < a < 0 :
        negative += 1
    if 100 > a > 0 :
        positive += 1
print("Кол-во положительных чисел: ", positive)
print("Кол-во отрицательных чисел: ", negative)
print('*****************************************************')

print('Задача 7. Обычный день на работе')
# Что нужно сделать
# Максим программирует целый день на работе и вечером идёт домой. Каждый час начальство
# кидает ему несколько задач, которые нужно решить до следующего рабочего часа.
# Вдобавок каждый час Максиму звонит супруга. Он знает, что если он возьмёт трубку,
# то жена попросит зайти вечером в магазин.
# Напишите программу, в которой считается, сколько задач выполнил Максим за день
# (8 часов). Если он хоть раз взял трубку, то в конце дополнительно выводите сообщение: «Нужно зайти в магазин».
# Пример:
# Начался 8-часовой рабочий день
# 1-й час
# Сколько задач решит Максим? 1
# Звонит жена. Взять трубку? (1 — да, 0 — нет):  0
# 2-й час
# Сколько задач решит Максим? 2
# Звонит жена. Взять трубку? (1 — да, 0 — нет): 0
# 3-й час
# Сколько задач решит Максим? 3
# Звонит жена. Взять трубку? (1 — да, 0 — нет):  0
# 4-й час
# Сколько задач решит Максим? 4
# Звонит жена. Взять трубку? (1 — да, 0 — нет):  1
# 5-й час
# Сколько задач решит Максим? 5
# Звонит жена. Взять трубку? (1 — да, 0 — нет):  0
# 6-й час
# Сколько задач решит Максим? 1
# Звонит жена. Взять трубку? (1 — да, 0 — нет):  0
# 7-й час
# Сколько задач решит Максим? 2
# Звонит жена. Взять трубку? (1 — да, 0 — нет):  1
# 8-й час
# Сколько задач решит Максим? 3
# Звонит жена. Взять трубку? (1 — да, 0 — нет):  0
# Рабочий день закончился. Всего выполнено задач: 21
# Нужно зайти в магазин.
# Что оценивается
# input содержит корректное приглашение для ввода;
# формат вывода соответствует примеру;
# число итераций не превосходит число рабочих часов;
# используется флаг для учёта факта звонка жены;
# переменные имеют значащие имена, не только a, b, c, d (видео 2.3);
# правильное употребление пробелов после запятых и при бинарных операциях.

time, work, score = 0, 0, 0,
while time < 8 :
    time += 1
    print(time, '-й', ' час', sep='')
    work += int(input('Сколько задач решит Максим? '))
    score += int(input('Звонит жена. Взять трубку? (1 — да, 0 — нет): '))
if score > 0:
    print('Нужно зайти в магазин.')
print('Рабочий день закончился. Всего выполнено задач: ', work)
print('*****************************************************')

print(' Задача 8. Вклады')
# Что нужно сделать
# Вклад в банке составляет X рублей. Ежегодно он увеличивается на P процентов, после чего
# дробная часть копеек отбрасывается. Определите, через сколько лет вклад составит не менее Y рублей.
# Напишите программу, которая по данным числам X, Y, P определяет, сколько лет пройдёт,
# прежде чем сумма достигнет значения Y.
# Что оценивается
# результат вычислений корректен;
# input содержит корректное приглашение для ввода;
# переменные имеют значащие имена, не только a, b, c, d (видео 2.3);
# правильное употребление пробелов после запятых и при бинарных операциях.

money = int(input('Вклад в банке составляет: '))
percent = int(input('Процент: '))
summ = int(input('Желаемая сумма: '))
year = 0
while money < summ:
    x = money * percent / 100
    money += x
    year += 1
money //= 1
print("Столько (в годах) нужно:", year, "," ' чтобы накопить:', summ, 'рублей')
print('*****************************************************')

print('Задача 9. Игра «Угадай число»')
# Что нужно сделать
# В одном из домашних заданий мы делали задачу, где папа-программист написал для сына программу,
# которая просит его угадать число. Недостаток программы был в том, что бедному сыну приходилось
# её каждый раз перезапускать, чтобы угадывать число. Теперь, когда мы знаем гораздо больше,
# пришло время исправить этот недостаток и заодно немного улучшить саму игру.
# Напишите программу-игру, которая запрашивает у пользователя число до тех пор,
# пока он его не отгадает. Выводите сообщения в соответствии с примером.
# Пример (загадали число 7):
# Введите число: 3
# Число меньше, чем нужно. Попробуйте ещё раз!
# Введите число: 10
# Число больше, чем нужно. Попробуйте ещё раз!
# Введите число: 8
# Число больше, чем нужно. Попробуйте ещё раз!
# Введите число: 7
# Вы угадали! Число попыток: 4
# Что оценивается
# формат вывода соответствует заданию;
# input содержит корректное приглашение для ввода;
# переменные имеют значащие имена, не только a, b, c, d (видео 2.3);
# правильное употребление пробелов после запятых и при бинарных операциях.

number = 0
x = 7
attempt = 0
while number != x:
    number = int(input('Введите число: '))
    if number > x:
        print('Число больше, чем нужно. Попробуйте ещё раз!')
    else:
        print('Число меньше, чем нужно. Попробуйте ещё раз!')
    attempt += 1
print('Вы угадали! Число попыток: ', attempt)

print('Задача 10. Игра «Компьютер угадывает число»')
# Что нужно сделать
# Поменяйте мальчика и компьютер из прошлой задачи местами. Теперь мальчик загадывает
# число между 1 и 100 (включительно). Компьютер может спросить у мальчика:
# «Твоё число равно, меньше или больше, чем число N?», где N — число, которое
# хочет проверить компьютер. Мальчик отвечает одним из трёх чисел: 1 — равно, 2 — больше, 3 — меньше.
# Напишите программу, которая с помощью цепочки таких вопросов и ответов мальчика угадывает число.
# Дополнительно: сделайте так, чтобы можно было гарантированно угадать число за семь попыток.

# Что оценивается
# результат вычислений корректен;
# input содержит корректное приглашение для ввода;
# правильное употребление пробелов после запятых и при бинарных операциях.
# Что оценивается (общее)
# правильно оформленный input, без пустого приветствия для ввода (видео 2.3);
# переменные имеют значащие имена, не только a, b, c, d (видео 2.3);
# правильное употребление пробелов после запятых и при бинарных операциях;
# отсутствие пробелов после имён функций и перед скобками: “print ()”,“input ()” — неверно, “print()” — верно;
# правильно оформлены блоки if-elif-else, отступы одинаковы во всех блоках одного уровня:
# Правильно
# Неправильно
# переменные имеют корректные названия, в качестве имён не используются имена встроенны
# х функций (список встроенных функций — официальная документация)\

import math
print('Загадайте число от 1 до 100 (включительно)')
question = int(input('Вы загадали число ? 1/0: '))
number = 0
min = 1
max = 100
x = 50
y = 0
if question == 1:
    while number != 1 and y < 7:
        number = int(input(f'Ваше число равно, меньше или больше, чем число ' + str(x) + ' : ' ))
        if number == 3:
            min = x
            x = math.ceil( x + (max - min) / 2)

        elif number ==2:
            max = x
            x = math.ceil(x - (max - min) / 2)
        y +=1
    if number == 1 :
        print('Я выиграл!!!')
    else:
        print('Вы ввели некоррекные данные!')
else:
    print('Игра окончена!!!')
